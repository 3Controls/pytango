
.. currentmodule:: PyTango.api2

.. _pytango-TEP1:

=================================
TEP 1 - Device Server API Level 2
=================================

================== ====================================================
 TEP:               1   
================== ====================================================
 Title:             Device Server API Level 2
 Version:           2.0.0
 Last-Modified:     18-Oct-2012
 Author:            Tiago Coutinho <tcoutinho@cells.es>
 Status:            Active
 Type:              Standards Track
 Content-Type:      text/x-rst
 Created:           17-Oct-2012
 Post-History:      18-Oct-2012
================== ====================================================

Abstract
========

This TEP aims to define a new high level API for writting device servers.

Rationale
=========

The code for Tango device servers written in Python often obey a pattern. It
would be nice if non tango experts could create tango device servers without
having to code some obscure tango related code. Some of the code which
is repeated over and over again in almost all python device servers could be
hidden from the tango developer.

Places to simplify
===================

Currently, a pogo generated device server code for a Motor having a double
attribute `position` would look like this::

    #!/usr/bin/env python
    # -*- coding:utf-8 -*- 


    ##############################################################################
    ## license :
    ##============================================================================
    ##
    ## File :        Motor.py
    ## 
    ## Project :     
    ##
    ## $Author :      t$
    ##
    ## $Revision :    $
    ##
    ## $Date :        $
    ##
    ## $HeadUrl :     $
    ##============================================================================
    ##            This file is generated by POGO
    ##    (Program Obviously used to Generate tango Object)
    ##
    ##        (c) - Software Engineering Group - ESRF
    ##############################################################################

    """"""

    __all__ = ["Motor", "MotorClass", "main"]

    __docformat__ = 'restructuredtext'

    import PyTango
    import sys
    # Add additional import
    #----- PROTECTED REGION ID(Motor.additionnal_import) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	Motor.additionnal_import

    ##############################################################################
    ## Device States Description
    ##
    ## No states for this device
    ##############################################################################

    class Motor (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Motor.global_variables) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	Motor.global_variables
    #------------------------------------------------------------------
    #    Device constructor
    #------------------------------------------------------------------
        def __init__(self,cl, name):
            PyTango.Device_4Impl.__init__(self,cl,name)
            self.debug_stream("In " + self.get_name() + ".__init__()")
            Motor.init_device(self)

    #------------------------------------------------------------------
    #    Device destructor
    #------------------------------------------------------------------
        def delete_device(self):
            self.debug_stream("In " + self.get_name() + ".delete_device()")
            #----- PROTECTED REGION ID(Motor.delete_device) ENABLED START -----#
            
            #----- PROTECTED REGION END -----#	//	Motor.delete_device

    #------------------------------------------------------------------
    #    Device initialization
    #------------------------------------------------------------------
        def init_device(self):
            self.debug_stream("In " + self.get_name() + ".init_device()")
            self.get_device_properties(self.get_device_class())
            self.attr_Position_read = 0.0
            #----- PROTECTED REGION ID(Motor.init_device) ENABLED START -----#
            
            #----- PROTECTED REGION END -----#	//	Motor.init_device

    #------------------------------------------------------------------
    #    Always excuted hook method
    #------------------------------------------------------------------
        def always_executed_hook(self):
            self.debug_stream("In " + self.get_name() + ".always_excuted_hook()")
            #----- PROTECTED REGION ID(Motor.always_executed_hook) ENABLED START -----#
            
            #----- PROTECTED REGION END -----#	//	Motor.always_executed_hook

    #==================================================================
    #
    #    Motor read/write attribute methods
    #
    #==================================================================

    #------------------------------------------------------------------
    #    Read Position attribute
    #------------------------------------------------------------------
        def read_Position(self, attr):
            self.debug_stream("In " + self.get_name() + ".read_Position()")
            #----- PROTECTED REGION ID(Motor.Position_read) ENABLED START -----#
            self.attr_Position_read = 1.0
            #----- PROTECTED REGION END -----#	//	Motor.Position_read
            attr.set_value(self.attr_Position_read)
            
    #------------------------------------------------------------------
    #    Read Attribute Hardware
    #------------------------------------------------------------------
        def read_attr_hardware(self, data):
            self.debug_stream("In " + self.get_name() + ".read_attr_hardware()")
            #----- PROTECTED REGION ID(Motor.read_attr_hardware) ENABLED START -----#
            
            #----- PROTECTED REGION END -----#	//	Motor.read_attr_hardware


    #==================================================================
    #
    #    Motor command methods
    #
    #==================================================================


    #==================================================================
    #
    #    MotorClass class definition
    #
    #==================================================================
    class MotorClass(PyTango.DeviceClass):

        #    Class Properties
        class_property_list = {
            }


        #    Device Properties
        device_property_list = {
            }


        #    Command definitions
        cmd_list = {
            }


        #    Attribute definitions
        attr_list = {
            'Position':
                [[PyTango.DevDouble,
                PyTango.SCALAR,
                PyTango.READ]],
            }


    #------------------------------------------------------------------
    #    MotorClass Constructor
    #------------------------------------------------------------------
        def __init__(self, name):
            PyTango.DeviceClass.__init__(self, name)
            self.set_type(name);
            print "In Motor Class  constructor"

    #==================================================================
    #
    #    Motor class main method
    #
    #==================================================================
    def main():
        try:
            py = PyTango.Util(sys.argv)
            py.add_class(MotorClass,Motor,'Motor')

            U = PyTango.Util.instance()
            U.server_init()
            U.server_run()

        except PyTango.DevFailed,e:
            print '-------> Received a DevFailed exception:',e
        except Exception,e:
            print '-------> An unforeseen exception occured....',e

    if __name__ == '__main__':
        main()


To make things clear, let's analyse the stripified version of the code instead::

    import PyTango
    import sys

    class Motor (PyTango.Device_4Impl):

        def __init__(self,cl, name):
            PyTango.Device_4Impl.__init__(self,cl,name)
            self.debug_stream("In " + self.get_name() + ".__init__()")
            Motor.init_device(self)

        def delete_device(self):
            self.debug_stream("In " + self.get_name() + ".delete_device()")

        def init_device(self):
            self.debug_stream("In " + self.get_name() + ".init_device()")
            self.get_device_properties(self.get_device_class())
            self.attr_Position_read = 0.0

        def always_executed_hook(self):
            self.debug_stream("In " + self.get_name() + ".always_excuted_hook()")

        def read_Position(self, attr):
            self.debug_stream("In " + self.get_name() + ".read_Position()")
            self.attr_Position_read = 1.0
            attr.set_value(self.attr_Position_read)

        def read_attr_hardware(self, data):
            self.debug_stream("In " + self.get_name() + ".read_attr_hardware()")


    class MotorClass(PyTango.DeviceClass):

        class_property_list = {
            }


        device_property_list = {
            }


        cmd_list = {
            }


        attr_list = {
            'Position':
                [[PyTango.DevDouble,
                PyTango.SCALAR,
                PyTango.READ_WRITE]],
            }

        def __init__(self, name):
            PyTango.DeviceClass.__init__(self, name)
            self.set_type(name);
            print "In Motor Class  constructor"

            
    def main():
        try:
            py = PyTango.Util(sys.argv)
            py.add_class(MotorClass,Motor,'Motor')

            U = PyTango.Util.instance()
            U.server_init()
            U.server_run()

        except PyTango.DevFailed,e:
            print '-------> Received a DevFailed exception:',e
        except Exception,e:
            print '-------> An unforeseen exception occured....',e

    if __name__ == '__main__':
        main()

After looking at most python device servers one can see some patterns:

At `<Device>` class level:
    
    #. <Device> always inherits from latest available DeviceImpl from pogo version
    #. constructor always does the same:
        #. calls super constructor
        #. debug message
        #. calls init_device
    
    #. all methods have debug_stream as first instruction
    #. init_device does additionaly get_device_properties()
 
At `<Device>Class` class level:
    
    #. A <Device>Class class exists for every <DeviceName> class
    #. The <Device>Class class only contains attributes, commands and
       properties descriptions (no logic)
    #. The attr_list description always follows the same (non explicit) pattern
       (and so does cmd_list, class_property_list, device_property_list)
    #. the syntax for attr_list, cmd_list, etc is far from understandable 
     
At `main()` level:

    #. The main() method always does the same:
        #. create `Util`
        #. register tango class
        #. `server_init()`
        #. `server_run()`



High level API
==============

The goals of the high level API are:
    
    #. Automatically inherit from latest DeviceImpl available from current PyTango installation
    #. add default implementation for `init_device`: debug_stream(), get_device_properties()
    #. Hide `<Device>Class` class completely
    #. simplify `main()`

The final code could look something like this::

    #!/usr/bin/env python

    from PyTango import server_run
    from PyTango.api2 import Device, DeviceMeta, attribute, command, \
        device_property, class_property


    class Motor(Device):
        __metaclass__ = DeviceMeta

        position = attribute()
                        
        def read_position(self, attr):
            attr.set_value(2.3)
        
        @command()        
        def move(self, position):
            pass
        
    def main():
        server_run((Motor,))

    if __name__ == "__main__":
        main()


Ok, a pogo generated code could look like this::

    ##############################################################################
    # File :        Motor.py
    # Project :     motor project
    # Author :     tcoutinho
    #============================================================================
    #            This file is generated by POGO
    #    (Program Obviously used to Generate tango Object)
    #
    #        (c) - Software Engineering Group - ESRF
    ##############################################################################

    import PyTango
    from PyTango.api2 import Device, DeviceMeta, Attr

    # Add additional import
    #----- PROTECTED REGION ID(Motor.additionnal_import) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	Motor.additionnal_import

    class Motor(Device):
        __metaclass__ = DeviceMeta

        #--------- Add you global variables here --------------------------
        #----- PROTECTED REGION ID(Motor.global_variables) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Motor.global_variables

        def init_device(self):
            Device.init_device(self)
            self.attr_Position_read = 0.0
            #----- PROTECTED REGION ID(Motor.init_device) ENABLED START -----#
            
            #----- PROTECTED REGION END -----#	//	Motor.init_device
        
        # Motor read/write attribute methods        

        def read_position(self, attr):
            #----- PROTECTED REGION ID(Motor.Position_read) ENABLED START -----#
            self.attr_Position_read = 1.0
            #----- PROTECTED REGION END -----#	//	Motor.Position_read
            attr.set_value(self.attr_Position_read)

        
        position = attribute(name='position',
                             dtype=PyTango.DevDouble,
                             dformat=PyTango.AttrDataFormat.SCALAR,
                             fread=read_position)
        
    def main():
        classes = Motor,
        server_run(classes)

    if __name__ == "__main__":
        main()

but still is far more inteligable than the original version.

References
==========

Changes
=======

From 1.0.0 to 2.0.0
-------------------
    
* API Changes
    * changed Attr to attribute
    * changed Cmd to command
    * changed Prop to device_property
    * changed ClassProp to class_property

* Included command and properties in the example
* Added references to API documentation

Copyright
=========

This document has been placed in the public domain.

